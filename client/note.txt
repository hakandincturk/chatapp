// get collection all data to state
useEffect(() => {
  const querySnapshot = getDocs(collection(db, "users"))
  .then((querySnapshot) => {
    querySnapshot.forEach((doc) => {
      const newData = querySnapshot.docs.map((doc) => ({...doc.data(), id:doc.id }));
      setData(newData);     
      console.log(doc.id, " => ", doc.data());
    });
  })
}, [])

// add new data to collection
const docRef = await addDoc(collection(db, "users"), {
  name: 'asd123',    
  password: 'dsa333'    
});  
      
console.log("Document written with ID: ", docRef.id);

// add new data to collection with custom id
const docRef = await setDoc(doc(db, '${collectionName}', '${id}'), {
  name: 'asd123',    
  password: 'dsa333'    
});  
console.log("Document written with ID: ", docRef.id);


// add new data to collection in subCollection
const docRef = await setDoc(doc(db, 'users', 'deneme', 'contacts', 'userId'), {
  name: 'asd123',    
  password: 'dsa333', 
  pass: '123', 
}, { merge: true });  


// diff for humans
const nowDate = moment();
const fireBaseTime = new Date(
  doc.data()?.updatedAt?.seconds * 1000 + doc.data()?.updatedAt?.nanoseconds / 1000000,
);
nowDate.diff(moment(fireBaseTime), 'hours')